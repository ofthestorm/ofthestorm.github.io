<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少女情懷總是詩</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-13T14:50:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>keke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试复习</title>
    <link href="http://yoursite.com/2018/03/12/post/"/>
    <id>http://yoursite.com/2018/03/12/post/</id>
    <published>2018-03-12T14:32:14.000Z</published>
    <updated>2018-03-13T14:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h4 id="Doctype"><a href="#Doctype" class="headerlink" title="Doctype"></a>Doctype</h4><p>指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令</p>
<p>在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</p>
<p>HTML5 不基于 SGML，所以不需要引用 DTD。</p>
<p>标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p>
<h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><p><a href="https://www.jianshu.com/p/6efcccb5ed43" target="_blank" rel="external">https://www.jianshu.com/p/6efcccb5ed43</a></p>
<p>chrome - Blink  V8</p>
<p>safari - Webkit</p>
<p>Firefox - Gecko</p>
<p>IE - Trident</p>
<h4 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h4><h4 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h4><p>兼容：轮询</p>
<h4 id="SVG-amp-canvas"><a href="#SVG-amp-canvas" class="headerlink" title="SVG &amp; canvas"></a>SVG &amp; canvas</h4><p> Canvas是使用JavaScript程序绘图(动态生成)，SVG是使用XML文档、css、js描述来绘图。     从这点来看：SVG更适合用来做动态交互，而且SVG绘图很容易编辑，只需要增加或移除相应的元素就可以了。       同时SVG是基于矢量的，所有它能够很好的处理图形大小的改变。Canvas是基于位图的图像，它不能够改变大小，只能缩放显示；所以说Canvas更适合用来实现类似于Flash能做的事情(当然现在Canvas与Flash相比还有一些不够完善的地方)。</p>
<p>Canvas提供的功能更原始，适合像素处理，动态渲染和大数据量绘制</p>
<p>SVG功能更完善，适合静态图片展示，高保真文档查看和打印的应用场景</p>
<p><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p>
<p>从SEO角度看，title的权重高于H1，其适用性要比H1广。从搜索引擎角度来说，title标签是用来描述这个页面的主题的，是一个网页权重的最高点。但title标签并不出现在文章的正文中。而h1标签一般出现在文章的正文中，是展示给访问者的文章的标题。所以说这两个标签不仅不冲突的，而是合作的关系。一篇文章既要有title又要有h1标签，既突出了文章的主题，又突出了标题和关键字，达到双重优化网站的效果。</p>
<p>b和strong标签，在网页中默认的情况下均是加粗字体的作用；</p>
<p><strong>标签是一个实体标签，它所包含的字符将被设为blod粗体，是html语言中的；—视觉化</strong></p>
<p><strong>标签是一个逻辑标签，作用是为了加强语气而加粗字体，是xhtml中的，其强调作用，可以用css标</strong></p>
<p><strong>签控制strong强调的方式。—-语义化标签</strong></p>
<p>在符合w3c的标准，推荐使用strong标签—语义化</p>
<p>b， i 视觉要素</p>
<p>strong ，em 表达要素</p>
<p>盒模型</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fp9y309w11j30gm0a5ab1.jpg" alt="img"></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fp9y32v97ij30jg0bvwfl.jpg" alt="img"></p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>visible</td>
<td>默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td>hidden</td>
<td>内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td>scroll</td>
<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>auto</td>
<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody>
</table>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>子选择器 div &gt; p 只有第一代</p>
<p>后代选择器 div p 所有代</p>
<h4 id="伪类顺序"><a href="#伪类顺序" class="headerlink" title="伪类顺序"></a>伪类顺序</h4><p><strong>Link–visited–hover–active</strong></p>
<p>love hate</p>
<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul>
<li><strong>伪元素不属于文档</strong>，所以js无法操作它</li>
<li>伪元素属于主元素的一部分，因此<strong>点击伪元素触发的是主元素的click事件</strong></li>
</ul>
<p>优点</p>
<ul>
<li>减少dom节点数</li>
<li>让css帮助解决部分js问题，让问题变得简单</li>
</ul>
<p>缺点</p>
<ul>
<li>不利于SEO</li>
<li>无法审查元素，不利于调试</li>
</ul>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p><a href="https://segmentfault.com/a/1190000004865198" target="_blank" rel="external">https://segmentfault.com/a/1190000004865198</a></p>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>relative 相对定位相对的是它原本在文档流中的位置而进行的偏移*</p>
<p>absolute 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。</p>
<h4 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h4><p>css多列等高</p>
<p>浏览器兼容方案</p>
<p>CSS3新特性</p>
<h4 id="CSS优化"><a href="#CSS优化" class="headerlink" title="CSS优化"></a>CSS优化</h4><p><a href="https://www.zhihu.com/question/19886806" target="_blank" rel="external">https://www.zhihu.com/question/19886806</a></p>
<p>####visibility</p>
<p>其实<code>visibility</code>可以有第三种值，就是<code>collapse</code>。当一个元素的<code>visibility</code>属性被设置成<code>collapse</code>值后，对于一般的元素，它的表现跟<code>hidden</code>是一样的。但例外的是，如果这个元素是table相关的元素，例如table行，table group，table列，table column group，它的表现却跟<code>display: none</code>一样，也就是说，它们占用的空间也会释放。</p>
<p>CSS的clip属性只在绝对定位的元素上才会生效</p>
<p>元素竖向的百分比设定是相对于容器的宽度，而不是高度</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h4 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h4><p>在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。hasOwnProperty是 JavaScript 中唯一处理属性并且不会遍历原型链的方法。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p>
<h4 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h4><p>内部函数可以访问外部函数的变量，外部不能访问内部函数的变量。如果忘记var，那么变量就被声明为全局变量了</p>
<p><a href="http://bubkoo.com/2014/03/10/explaining-javascript-scope-and-closures/" target="_blank" rel="external">http://bubkoo.com/2014/03/10/explaining-javascript-scope-and-closures/</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/node-lessons/scope-closure.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/node-lessons/scope-closure.html</a></p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>耗CPU的操作比如动画的渲染会新开一个线程。</p>
<p>数据太多 -&gt; 分页， lazyload， cache </p>
<p>页面中不同部分不在同一库中，客户端分别query3个数据库</p>
<p>客户端发起一个query，3个数据库源在server有cache，缓存静态页面，可以支撑很多人访问。</p>
<p>数据的显示：组件复用</p>
<p>数据库横向扩展</p>
<p>评论-&gt;逻辑表，由若干物理表组成 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;h4 id=&quot;Doctype&quot;&gt;&lt;a href=&quot;#Doctype&quot; class=&quot;headerlink&quot; title=&quot;Doc
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最希望拥有的能力</title>
    <link href="http://yoursite.com/2017/05/28/2017-5-28/"/>
    <id>http://yoursite.com/2017/05/28/2017-5-28/</id>
    <published>2017-05-28T15:13:36.000Z</published>
    <updated>2017-05-28T15:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>钝感力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;钝感力。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
